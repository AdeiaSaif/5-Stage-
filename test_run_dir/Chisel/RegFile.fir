;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit RegFile : 
  module RegFile : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip data : SInt<32>, flip w_en : UInt<1>, out1 : SInt<32>, out2 : SInt<32>}
    
    wire _Regfile_WIRE : SInt<32>[32] @[RegFile.scala 17:32]
    _Regfile_WIRE[0] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[1] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[2] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[3] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[4] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[5] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[6] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[7] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[8] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[9] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[10] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[11] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[12] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[13] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[14] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[15] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[16] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[17] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[18] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[19] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[20] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[21] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[22] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[23] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[24] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[25] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[26] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[27] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[28] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[29] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[30] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    _Regfile_WIRE[31] <= asSInt(UInt<32>("h00")) @[RegFile.scala 17:32]
    reg Regfile : SInt<32>[32], clock with : (reset => (reset, _Regfile_WIRE)) @[RegFile.scala 17:24]
    node _T = orr(io.rs1) @[RegFile.scala 18:15]
    when _T : @[RegFile.scala 18:20]
      io.out1 <= Regfile[io.rs1] @[RegFile.scala 19:13]
      skip @[RegFile.scala 18:20]
    else : @[RegFile.scala 21:13]
      io.out1 <= asSInt(UInt<1>("h00")) @[RegFile.scala 22:13]
      skip @[RegFile.scala 21:13]
    node _T_1 = orr(io.rs2) @[RegFile.scala 24:15]
    when _T_1 : @[RegFile.scala 24:20]
      io.out2 <= Regfile[io.rs2] @[RegFile.scala 25:13]
      skip @[RegFile.scala 24:20]
    else : @[RegFile.scala 27:13]
      io.out2 <= asSInt(UInt<1>("h00")) @[RegFile.scala 28:13]
      skip @[RegFile.scala 27:13]
    node _T_2 = orr(io.rd) @[RegFile.scala 30:14]
    node _T_3 = eq(io.w_en, UInt<1>("h01")) @[RegFile.scala 30:28]
    node _T_4 = and(_T_2, _T_3) @[RegFile.scala 30:18]
    when _T_4 : @[RegFile.scala 30:36]
      Regfile[io.rd] <= io.data @[RegFile.scala 31:20]
      skip @[RegFile.scala 30:36]
    
